name: Backup

on:
  # schedule:
  #   - cron: "0 12 * * *"
  workflow_dispatch: {}

jobs:
  matrix:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - id: matrix
        run: echo 'matrix=[{"owner":"USA-RedDragon"},{"owner":"AstroGardenLLC"},{"owner":"kubewg-net"},{"owner":"USA-RedDragon-ORG"}]' >>"$GITHUB_OUTPUT"

  backup:
    name: Backup
    needs: [matrix]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        owners: ${{fromJson(needs.matrix.outputs.matrix)}}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Authenticate to Authentik
        uses: USA-RedDragon/action-authentik@v0.0.3
        id: authentik
        with:
          authentik-url: ${{ vars.AUTHENTIK_URL }}
          client-id: ${{ secrets.AUTHENTIK_CLIENT_ID }}
      - name: Authentik to Minio OIDC
        run: |
          echo ${{ steps.authentik.outputs.token }}
      - name: GitHub Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
          owner: ${{ matrix.owners.owner }}
      - name: Backup repos
        id: backup
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          set -eu
          gh auth setup-git
          do_backup() (
            set -eu
            source <(yq -p=json -o=shell <<<"$1")
            mkdir -p "${{ matrix.owners.owner }}"
            reponame="${{ matrix.owners.owner }}_$name"
            repodir="${{ matrix.owners.owner }}/$name"
            git clone --mirror "https://github.com/${{ matrix.owners.owner }}/$name" "$reponame"
            tar --sort=name --mtime="$pushedAt" -cf "$reponame.tar" "$reponame"
            rm -rf "$reponame"
            mkdir -p "$repodir"
            mv "$reponame.tar" "$repodir"
            du -sh "$repodir"
            aws --endpoint-url "${{ vars.MINIO_ENDPOINT }}" s3 sync "$repodir" "s3://${{ vars.MINIO_BUCKET }}/$repodir"
            rm -rf "$repodir"
          )
          export -f do_backup
          gh repo list --no-archived --limit=9999 --json name,pushedAt ${{ matrix.owners.owner }} \
            | jq -c 'sort_by(.name | ascii_downcase) | .[]' \
            | parallel do_backup 2>&1
